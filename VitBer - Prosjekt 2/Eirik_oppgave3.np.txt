V0_3 = -100
w_3 = 2
b_3 = 3

V_3 = np.ones(1) * inf
V_3 = np.concatenate((V_3,np.zeros(n*10*w//int(22*w_3+b_3))))
V_3 = np.concatenate((V_3, V0_3 * np.ones(n*w // (22*w_3 + b_3))))
V_3 = np.concatenate((V_3, np.zeros(n*b_3//(22*w_3 + b_3))))
V_3 = np.concatenate((V_3, V0_3 * np.ones(n*w // (22*w_3 + b_3))))
V_3 = np.concatenate((V_3,np.zeros(n*int(10*w)//(22*w_3+b_3))))
V_3 = np.concatenate((V_3,np.ones(1) * inf))

n_3 = len(V_3)
x_3 = np.linspace(0,(22*w+b_3),n_3)
E_3, phi_3 = solveTUSL(V_3, x_3, n_3-2)
l_3 = 3
plotEigenfunc(phi_3, V_3, x_3, l_3)

for i in range(l_3):
    print(E_3[i])